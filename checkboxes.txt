package demo;

import java.sql.*;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.beans.property.BooleanProperty;

import javafx.beans.property.SimpleBooleanProperty;

import javafx.beans.property.StringProperty;

import javafx.beans.property.SimpleStringProperty;

import javafx.beans.value.ChangeListener;

import javafx.beans.value.ObservableValue;

import javafx.collections.FXCollections;

import javafx.collections.ObservableList;

import javafx.event.EventHandler;

import javafx.geometry.Pos;

import javafx.scene.control.CheckBox;

import javafx.scene.control.TableCell;

import javafx.scene.control.TableColumn;

import javafx.scene.control.TableColumn.CellEditEvent;

import javafx.scene.control.TableView;

import javafx.scene.control.TextField;

import javafx.scene.control.cell.PropertyValueFactory;

import javafx.scene.input.KeyCode;

import javafx.scene.input.KeyEvent;

import javafx.util.Callback;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.CheckBox;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.event.ActionEvent;


public class Demo1 extends Application  {
	private TableView tableView = new TableView();
	private Connection connection;
	private Statement statement;
	private TextArea taSQLResult = new TextArea();
	private TextArea tasqlCommand = new TextArea();
	private TextField tfUsername = new TextField();
	private TextField tfURL = new TextField();
	private TextField tfAantal = new TextField();
	private PasswordField pfPassword = new PasswordField();
	private ComboBox<String> cboURL = new ComboBox<>();
	private ComboBox<String> cboDriver = new ComboBox<>();
	private Button btExecuteSQL = new Button("Execute SQL Command");
	private Button btUpdate = new Button("Update");
	private Button btVoegBestelling = new Button("Voeg Bestelling toe");
	private Button btVoegArtikel = new Button("Voeg Artikel");
	private Button btClearSQLCommand = new Button("Delete");
	private Button btConnectDB = new Button("Connect to Database");
	
	private Button btVervers = new Button("Ververs tabel");
	private Button btNieuweKlant = new Button("Maak nieuwe klant");
	private Button btMaakKlanten = new Button("maak klanten aan");
	private Label lblConnectionStatus = new Label("No connection now");
	private BorderPane borderPaneExecutionResult = new BorderPane();
	
	@Override
	public void start(Stage primaryStage) {
		cboURL.getItems().addAll(FXCollections.observableArrayList(
		"jdbc:Mysql://localhost:3306/mydb",
		"jdbc:mysql://liang.armstrong.edu/mydb",
		"jdbc:odbc:exampleMDBDataSource",
	"jdbc:oracle:thin:@liang.armstrong.edu:1521:orcl"));
		 cboURL.getSelectionModel().selectFirst();
		 
		 cboDriver.getItems().addAll(FXCollections.observableArrayList(
				 "com.mysql.jdbc.Driver", "sun.jdbc.odbc.dbcOdbcDriver",
				 "oracle.jdbc.driver.OracleDriver"));
				 cboDriver.getSelectionModel().selectFirst();
		 
				 GridPane gridPane = new GridPane();
				 
				 gridPane.add(cboURL, 1, 0);
				 gridPane.add(cboDriver, 1, 1);
				 gridPane.add(tfUsername, 1, 2);
				 gridPane.add(pfPassword, 1, 3);
				 gridPane.add(new Label("url datasource"), 0, 0);
				 gridPane.add(new Label("Datasource"),0, 1);
				 gridPane.add(new Label("gebruikersnaam"), 0, 2);
				 gridPane.add(new Label("wachtwoord"), 0, 3);
				gridPane.add(new Label("     maak random klanten"),2,0);
				gridPane.add(new Label("     Voer aantal in: "), 2, 1); 
				gridPane.add(tfAantal, 3, 1);
				gridPane.add(btMaakKlanten, 2, 2);
				 HBox hBoxUpdate = new HBox();
				 hBoxUpdate.getChildren().addAll(btVervers, btNieuweKlant, btVoegArtikel,btVoegBestelling);
				
				
				 HBox hBoxConnection = new HBox();
				 hBoxConnection.getChildren().addAll(
				 lblConnectionStatus, btConnectDB);
				 hBoxConnection.setAlignment(Pos.CENTER_RIGHT);
				 VBox vBoxConnection = new VBox(5);
				 vBoxConnection.getChildren().addAll(new Label("Enter Database Information"),
				 gridPane, hBoxConnection, hBoxUpdate);
				 gridPane.setStyle("-fx-border-color: black;");
				 
				 HBox hBoxSQLCommand = new HBox(5);
				 hBoxSQLCommand.getChildren().addAll(
				 btClearSQLCommand, btExecuteSQL, btUpdate);
				 hBoxSQLCommand.setAlignment(Pos.CENTER_RIGHT);
				 	 
				 BorderPane borderPaneSqlCommand = new BorderPane();
				 borderPaneSqlCommand.setTop(  new Label("Enter an SQL Command"));
				 borderPaneSqlCommand.setCenter(
				 new ScrollPane(tasqlCommand));
				borderPaneSqlCommand.setBottom(
				 hBoxSQLCommand);
				
				 HBox hBoxConnectionCommand = new HBox(10);
				 hBoxConnectionCommand.getChildren().addAll(
				 vBoxConnection, borderPaneSqlCommand);
				 
				  
				  borderPaneExecutionResult.setTop(  new Label("SQL Execution Result"));
				  borderPaneExecutionResult.setCenter(taSQLResult);
				
				 
				  BorderPane borderPane = new BorderPane();
				  borderPane.setTop(hBoxConnectionCommand);
				  borderPane.setCenter(borderPaneExecutionResult);	
				  
				  
				  Scene scene = new Scene(borderPane, 670, 400);
				  primaryStage.setTitle("SQLClient"); // Set the stage title
				  primaryStage.setScene(scene); // Place the scene in the stage
				  primaryStage.show(); // Display the stage
				  
				btConnectDB.setOnAction(e -> connectToDB());
				  btExecuteSQL.setOnAction(e -> executeSQL());
				  btClearSQLCommand.setOnAction(e -> tasqlCommand.setText(null));
				  
				  btVervers.setOnAction(e -> processSQLSelect("select * from klant"));
				  btMaakKlanten.setOnAction(e -> {
					  if(connection == null){
						  taSQLResult.setText("Please connect first");
						  return;
					  }
				  new Thread(() -> batchUpdate()).start();
				  });
				
				   }
				  
	private void batchUpdate() {
	    if (connection != null) {
	    	try{
				
				statement = connection.createStatement();
				String aantalKlanten = tfAantal.getText().trim();
				int klanten = Integer.parseInt(aantalKlanten);
				if(klanten<=0)
					taSQLResult.setText("Geen klanten aangemaakt, voer correct aantal in");
				else{
				String[] names = {"Hani" , "Gerbrich", "Sander", "Maarten", "Remi" , "Rob" , "Bo" , "Jan" , "Willem" , " Piet"};
				String[] tussenvoegsel = {"van", "de", "el","","van de", "van der" , "ten", "van de", "uit het", "voor den"};
				String[] achternaam = {"de Jong", "Bakker", "Visser", "de Boer", "Peters","de Graaf", "Jacobs", "Ali", "Hassan", "Beatrix"};
				String[] straatnaam = {"Schoolstraat", "Dorpstraat", "Nieuwstraat", "Kastanjelaan", "Eikenlaan", "Stationsweg","Markt","Beukenlaan","Industrieweg","Molenstraat"};
				String[] postcode = {"2001aa" , "2002aa", "2003aa","2003ab","2005aa","2006aa","2007aa","2008aa","2009aa","2010aa"};
				for ( int i = 1; i<=klanten ; i++ ){
					statement.addBatch("INSERT INTO KLANT VALUES(" + Math.random()*100000 + ",'" + names[(int)(Math.random()*10)] + "','" + tussenvoegsel[(int)(Math.random()*10)] + "','" 
							+ achternaam[(int)(Math.random()*10)] + "','email','" + straatnaam[(int)(Math.random()*10)] + "'," + Math.random()*500+",'toev.','" 
							+postcode[(int)(Math.random()*10)] + "','Amsterdam')");
				}
				statement.executeBatch();
				}	
	    	}
	    	catch (Exception ex) {
	            ex.printStackTrace();
	    }
	    }}
			
	
	
	private void connectToDB(){
					  
	String driver = cboDriver.getSelectionModel().getSelectedItem();
	String url = cboURL.getSelectionModel().getSelectedItem();
	String username = tfUsername.getText().trim();
	String password = pfPassword.getText().trim();
	try {
		Class.forName(driver);
	connection = DriverManager.getConnection(
	url, username, password);
	lblConnectionStatus.setText("Connected to " + url);
	}
		catch (java.lang.Exception ex) {
		 ex.printStackTrace();
		 }
		}
		
		private void executeSQL(){
			if(connection ==null){
				taSQLResult.setText("Please connect first");
			
			return;
		}
			else{
				String sqlCommands = tasqlCommand.getText().trim();
				String[] commands = sqlCommands.replace('\n', ' ').split(";");
				for (String aCommand: commands) {				
					if (aCommand.trim().toUpperCase().startsWith("SELECT")) {
						processSQLSelect(aCommand);
					}
					else{
						processSQLNonSelect(aCommand);
					}
					}
	
				
			}
	
					  
				  }
				 
		private void processSQLSelect(String sqlCommand){
			borderPaneExecutionResult.getChildren().remove(taSQLResult);
			
			borderPaneExecutionResult.setCenter(tableView);
			try{
				
				statement = connection.createStatement();
				ResultSet resultSet = statement.executeQuery(sqlCommand);
				
				populateTableView(resultSet, tableView);
			} catch(SQLException ex){
				ex.printStackTrace();
			}
		}
		
                	
		private void populateTableView(ResultSet rs, TableView tableView) {
		    ObservableList<ObservableList> data = FXCollections.observableArrayList();
		    try {
		    
		     TableColumn klantIdCol = new TableColumn();
		     klantIdCol.setText("klant_id");
		     klantIdCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(0) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(0).toString());
			          }
			        });
		     TableColumn voornaamCol = new TableColumn();
		     voornaamCol.setText("voornaam");
		     voornaamCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(0) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(1).toString());
			          }
			        });
		     voornaamCol.setCellFactory(TextFieldTableCell.forTableColumn());
		        voornaamCol.setOnEditCommit(
		            new EventHandler<CellEditEvent<SimpleStringProperty, String>>() {
		                @Override
		                public void handle(CellEditEvent<SimpleStringProperty, String> t) {
		                    ((SimpleStringProperty) t.getTableView().getItems().get(
		                            t.getTablePosition().getRow())
		                            ).set(t.getNewValue());
		                }
		            }
		        );
		        
		     TableColumn tussenvoegselCol = new TableColumn();
		     tussenvoegselCol.setText("tussenvoegsel");
		     tussenvoegselCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(2) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(2).toString());
			          }
			        });
		     
		     TableColumn achternaamCol = new TableColumn();
		     achternaamCol.setText("achternaam");
		     achternaamCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(3) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(3).toString());
			          }
			        });
		     TableColumn emailCol = new TableColumn();
		     emailCol.setText("email");
		     emailCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(4) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(4).toString());
			          }
			        });
		     TableColumn straatnaamCol = new TableColumn();
		     straatnaamCol.setText("straatnaam");
		     straatnaamCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(5) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(5).toString());
			          }
			        });
		     TableColumn huisnummerCol = new TableColumn();
		     huisnummerCol.setText("huisnummer");
		     huisnummerCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(6) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(6).toString());
			          }
			        });
		     TableColumn toevoegingCol = new TableColumn();
		     toevoegingCol.setText("toevoeging");
		     toevoegingCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(7) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(7).toString());
			          }
			        });
		     TableColumn postcodeCol = new TableColumn();
		     postcodeCol.setText("postcode");
		     postcodeCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(8) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(8).toString());
			          }
			        });
		     
		  

		     TableColumn woonplaatsCol = new TableColumn();
		     woonplaatsCol.setText("woonplaats");
		     woonplaatsCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
			            if (param == null || param.getValue() == null || param.getValue().get(9) == null) {
			              return null;
			            }
			            return new SimpleStringProperty(param.getValue().get(9).toString());
			          }
			        });
		     
		   /*  Callback<TableColumn, TableCell> cellFactory =

		                new Callback<TableColumn, TableCell>() {

		 

		                    public TableCell call(TableColumn p) {

		                        return new EditingCell();

		                    }

		                };
		                klantIdCol.setCellFactory(cellFactory);
		                updateObservableListProperties(klantIdCol);
		     */           
		    
		     
		    	/*for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
		       
		        final int j = i;
		        TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));
		        
           //col.setCellValueFactory(TextFieldTableCell.forTableColumn());
		        col.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
		          public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
		            if (param == null || param.getValue() == null || param.getValue().get(j) == null) {
		              return null;
		            }
		            return new SimpleStringProperty(param.getValue().get(j).toString());
		          }
		        });
		      
		                
		                
		        tableView.getColumns().addAll(col);
		        System.out.println("Column [" + i + "] ");
		      }
*/
		     
		      // tableView.getColumns().addAll(klantIdCol,voornaamCol,tussenvoegselCol,achternaamCol,emailCol,straatnaamCol,huisnummerCol,toevoegingCol,postcodeCol,woonplaatsCol);
		       		      
		      while (rs.next()) {
		        
		        ObservableList<String> row = FXCollections.observableArrayList();
		        for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
		        
		          row.add(rs.getString(i));
		        }
		        System.out.println("Row [1] added " + row);
		        data.add(row);

		      }
		      CheckBox cb = new CheckBox("delete");
		    
		      
		      TableColumn updateCol = new TableColumn<ObservableList,CheckBox>();
		      updateCol.setText("update");
		     updateCol.setCellValueFactory(new PropertyValueFactory("update"));
		     updateCol.setCellFactory(new Callback<TableColumn<ObservableList, CheckBox>, TableCell<ObservableList, CheckBox>>() {
		    	 
		            public TableCell<ObservableList, CheckBox> call(TableColumn<ObservableList, CheckBox> p) {

		                return new CheckBoxTableCell<ObservableList, CheckBox>();

		            }
		     });
		    
		     TableColumn deleteCol = new TableColumn<String,Boolean>();
		      deleteCol.setText("delete");
		     deleteCol.setCellValueFactory(new PropertyValueFactory("delete"));
		     deleteCol.setCellFactory(new Callback<TableColumn<String, Boolean>, TableCell<String, Boolean>>() {

		            public TableCell<String, Boolean> call(TableColumn<String, Boolean> p) {

		                return new CheckBoxTableCell<String, Boolean>();
		            }
		     });
		  
		       tableView.getColumns().clear();      
		     tableView.setItems(data);
		      tableView.setEditable(true);
		      tableView.getColumns().addAll(klantIdCol,voornaamCol,tussenvoegselCol,achternaamCol,emailCol,straatnaamCol,huisnummerCol,toevoegingCol,postcodeCol,woonplaatsCol,updateCol,deleteCol);
		      tableView.getSelectionModel().setCellSelectionEnabled(true);
		     data.removeAll(tableView.getSelectionModel().getSelectedItems());
		     tableView.getSelectionModel().clearSelection();
		     
		    } catch (Exception e) {
		      e.printStackTrace();
		      System.out.println("Error on Building Data");
		    }
		  }

		private void processSQLNonSelect(String sqlCommand) {
		    borderPaneExecutionResult.getChildren().remove(tableView);
		    borderPaneExecutionResult.setCenter(taSQLResult);
		            
		    try {
		     
		      statement = connection.createStatement();

		     
		      statement.executeUpdate(sqlCommand);

		      taSQLResult.setText("SQL command executed");
		    }
		    catch (SQLException ex) {
		      taSQLResult.setText(ex.toString());
		    }
		  }
		public static class CheckBoxTableCell<S, T> extends TableCell<S, T> {

		    private final CheckBox checkBox;

		    private ObservableValue<T> ov;



		    public CheckBoxTableCell() {

		        this.checkBox = new CheckBox();

		        this.checkBox.setAlignment(Pos.CENTER);



		        setAlignment(Pos.CENTER);

		        setGraphic(checkBox);

		    } 

		  
		  public static void main(String[] args) {
		    launch(args);
		  }
		}
}